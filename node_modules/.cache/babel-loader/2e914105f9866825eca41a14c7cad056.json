{"ast":null,"code":"'use strict';\n\nvar qs = require('querystring'),\n    request = require('request');\n\nvar DISTANCE_API_URL = 'https://maps.googleapis.com/maps/api/distancematrix/json?';\n\nvar GoogleDistance = function () {\n  this.apiKey = '';\n  this.businessClientKey = '';\n  this.businessSignatureKey = '';\n};\n\nGoogleDistance.prototype.get = function (args, callback) {\n  var self = this;\n  var options = formatOptions.call(this, args);\n  fetchData(options, function (err, data) {\n    if (err) return callback(err);\n    formatResults(data, options, function (err, results) {\n      if (err) return callback(err);\n      return callback(null, results);\n    });\n  });\n};\n\nvar formatOptions = function (args) {\n  var options = {\n    index: args.index || null,\n    origins: args.origin,\n    destinations: args.destination,\n    mode: args.mode || 'driving',\n    units: args.units || 'metric',\n    language: args.language || 'en',\n    avoid: args.avoid || null,\n    sensor: args.sensor || false,\n    key: this.apiKey\n  };\n\n  if (!args.origin && args.origins) {\n    options.origins = args.origins.join('|');\n    options.batchMode = true;\n  }\n\n  if (!args.destination && args.destinations) {\n    options.destinations = args.destinations.join('|');\n    options.batchMode = true;\n  }\n\n  if (this.businessClientKey && this.businessSignatureKey) {\n    delete options.key;\n    options.client = this.businessClientKey;\n    options.signature = this.businessSignatureKey;\n  }\n\n  if (!options.origins) {\n    throw new Error('Argument Error: Origin is invalid');\n  }\n\n  if (!options.destinations) {\n    throw new Error('Argument Error: Destination is invalid');\n  }\n\n  return options;\n};\n\nvar formatResults = function (data, options, callback) {\n  var formatData = function (element) {\n    return {\n      index: options.index,\n      distance: element.distance.text,\n      distanceValue: element.distance.value,\n      duration: element.duration.text,\n      durationValue: element.duration.value,\n      origin: element.origin,\n      destination: element.destination,\n      mode: options.mode,\n      units: options.units,\n      language: options.language,\n      avoid: options.avoid,\n      sensor: options.sensor\n    };\n  };\n\n  var requestStatus = data.status;\n\n  if (requestStatus != 'OK') {\n    return callback(new Error('Status error: ' + requestStatus + ': ' + data.error_message));\n  }\n\n  var results = [];\n\n  for (var i = 0; i < data.origin_addresses.length; i++) {\n    for (var j = 0; j < data.destination_addresses.length; j++) {\n      var element = data.rows[i].elements[j];\n      var resultStatus = element.status;\n\n      if (resultStatus != 'OK') {\n        return callback(new Error('Result error: ' + resultStatus));\n      }\n\n      element.origin = data.origin_addresses[i];\n      element.destination = data.destination_addresses[j];\n      results.push(formatData(element));\n    }\n  }\n\n  if (results.length == 1 && !options.batchMode) {\n    results = results[0];\n  }\n\n  return callback(null, results);\n};\n\nvar fetchData = function (options, callback) {\n  request(DISTANCE_API_URL + qs.stringify(options), function (err, res, body) {\n    if (!err && res.statusCode == 200) {\n      var data = JSON.parse(body);\n      callback(null, data);\n    } else {\n      callback(new Error('Request error: Could not fetch data from Google\\'s servers: ' + body));\n    }\n  });\n};\n\nmodule.exports = new GoogleDistance();","map":null,"metadata":{},"sourceType":"script"}