{"ast":null,"code":"'use strict';\n\nvar request = require('request'),\n    debug = require('debug')(\"google:dm\"),\n    qs = require('qs-google-signature');\n\nvar validTravelModes = ['driving', 'walking', 'bicycling', 'transit'];\nvar validUnits = ['metric', 'imperial'];\nvar validRestrictions = ['tolls', 'highways', 'ferries', 'indoor'];\nvar validTrafficModel = ['best_guess', 'pessimistic', 'optimistic'];\nvar validTransitMode = ['bus', 'subway', 'train', 'tram', 'rail'];\nvar validTransitRoutingPreference = ['less_walking', 'fewer_transfers'];\nvar GOOGLE_DISTANCE_API_URL = 'https://maps.googleapis.com/maps/api/distancematrix/json?',\n    SEPARATOR = '|',\n    // free api key\nGOOGLE_API_KEY = process.env.GOOGLE_API_KEY || null,\n    // maps for business users key\nGOOGLE_CLIENT_KEY = process.env.GOOGLE_BUSINESS_CLIENT_KEY || null,\n    GOOGLE_SIGNATURE_KEY = process.env.GOOGLE_SIGNATURE_KEY || null;\n\nvar GoogleDistanceMatrix = function () {\n  this.options = {\n    origins: null,\n    destinations: null,\n    mode: 'driving',\n    units: 'metric',\n    language: 'en',\n    avoid: null\n  };\n\n  if (GOOGLE_CLIENT_KEY && GOOGLE_SIGNATURE_KEY) {\n    debug(\"Using Business Client/Key pair\", GOOGLE_CLIENT_KEY, GOOGLE_SIGNATURE_KEY);\n    this.options.client = GOOGLE_CLIENT_KEY;\n    this.options.signature = GOOGLE_SIGNATURE_KEY;\n  } else {\n    debug(\"Using simple API Key\", GOOGLE_API_KEY);\n    this.options.key = GOOGLE_API_KEY;\n  }\n};\n\nfunction formatLocations(locations) {\n  return locations.join(SEPARATOR);\n}\n\nfunction makeRequest(options, callback) {\n  debug(\"request options\", options);\n  var requestURL = GOOGLE_DISTANCE_API_URL + qs.stringify(options, GOOGLE_DISTANCE_API_URL);\n  debug(\"requestURL\", requestURL);\n  request(requestURL, function (err, response, data) {\n    if (err || response.statusCode != 200) {\n      return callback(new Error('Google API request error: ' + data));\n    }\n\n    callback(null, JSON.parse(data));\n  });\n}\n\nGoogleDistanceMatrix.prototype.matrix = function (args, cb) {\n  // validate arguments\n  if (arguments.length < 3) {\n    throw new Error('Invalid number of arguments');\n  }\n\n  var callback = arguments[arguments.length - 1];\n\n  if (typeof callback != 'function') {\n    throw new Error('Missing callback function');\n  } // format arguments\n\n\n  this.options.origins = formatLocations(arguments[0]);\n  this.options.destinations = formatLocations(arguments[1]); // makes a request to google api\n\n  makeRequest(this.options, function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, data);\n  });\n};\n\nGoogleDistanceMatrix.prototype.mode = function (mode) {\n  if (validTravelModes.indexOf(mode) < 0) {\n    throw new Error('Invalid mode: ' + mode);\n  }\n\n  this.options.mode = mode;\n};\n\nGoogleDistanceMatrix.prototype.language = function (language) {\n  this.options.language = language;\n};\n\nGoogleDistanceMatrix.prototype.avoid = function (avoid) {\n  if (validRestrictions.indexOf(avoid) < 0) {\n    throw new Error('Invalid restriction: ' + avoid);\n  }\n\n  this.options.avoid = avoid;\n};\n\nGoogleDistanceMatrix.prototype.units = function (units) {\n  if (validUnits.indexOf(units) < 0) {\n    throw new Error('Invalid units: ' + units);\n  }\n\n  this.options.units = units;\n};\n\nGoogleDistanceMatrix.prototype.departure_time = function (departure_time) {\n  this.options.departure_time = departure_time;\n};\n\nGoogleDistanceMatrix.prototype.arrival_time = function (arrival_time) {\n  this.options.arrival_time = arrival_time;\n};\n\nGoogleDistanceMatrix.prototype.key = function (key) {\n  delete this.options.client;\n  delete this.options.signature;\n  this.options.key = key;\n};\n\nGoogleDistanceMatrix.prototype.client = function (client) {\n  delete this.options.key;\n  this.options.client = client;\n};\n\nGoogleDistanceMatrix.prototype.signature = function (signature) {\n  delete this.options.key;\n  this.options.signature = signature;\n};\n\nGoogleDistanceMatrix.prototype.traffic_model = function (trafficModel) {\n  this.options.traffic_model = trafficModel;\n};\n\nGoogleDistanceMatrix.prototype.transit_mode = function (transitMode) {\n  this.options.transit_mode = transitMode;\n};\n\nGoogleDistanceMatrix.prototype.transit_routing_preference = function (transitRoutingPreference) {\n  this.options.transit_routing_preference = transitRoutingPreference;\n};\n\nGoogleDistanceMatrix.prototype.reset = function () {\n  this.options = {\n    origins: null,\n    destinations: null,\n    mode: 'driving',\n    units: 'metric',\n    language: 'en',\n    avoid: null\n  };\n};\n\nmodule.exports = new GoogleDistanceMatrix();","map":null,"metadata":{},"sourceType":"script"}