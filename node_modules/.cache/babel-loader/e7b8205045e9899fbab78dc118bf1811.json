{"ast":null,"code":"var _jsxFileName = \"/home/engineersticity/Desktop/imarket/src/pages/Signup.js\";\nimport React from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\nimport Header from '../components/header';\nimport Footer from '../components/footer'; // import CustomLayout from '../components/Layout';\n\nconst FormItem = Form.Item;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          this.props.onAuth(values.userName, values.email, values.password, values.confirm);\n          this.props.history.push('/');\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  componentDidMount() {\n    this.props.onTryAutoSignup();\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Header, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Login-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Register an Account With Us Today\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, getFieldDecorator('userName', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }),\n      type: \"password\",\n      placeholder: \"Password\",\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      style: {\n        marginRight: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Signup\"), \"Or\", React.createElement(NavLink, {\n      style: {\n        marginRight: '10px'\n      },\n      to: \"/login/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \" login\")))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2)),\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);","map":{"version":3,"sources":["/home/engineersticity/Desktop/imarket/src/pages/Signup.js"],"names":["React","Form","Input","Icon","Button","connect","NavLink","actions","Header","Footer","FormItem","Item","RegistrationForm","Component","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","onAuth","userName","email","password","confirm","history","push","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","componentDidMount","onTryAutoSignup","render","getFieldDecorator","rules","required","message","color","type","validator","marginRight","WrappedRegistrationForm","create","mapStateToProps","loading","error","isAuthenticated","token","mapDispatchToProps","dispatch","username","password1","password2","authSignup","authCheckState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\n\nimport Header from '../components/header';\nimport Footer from '../components/footer';\n\n// import CustomLayout from '../components/Layout';\n\nconst FormItem = Form.Item;\n\nclass RegistrationForm extends React.Component {\n\n    componentDidMount() {\n        this.props.onTryAutoSignup();\n    }\n\n  state = {\n    confirmDirty: false,\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.onAuth(\n            values.userName,\n            values.email,\n            values.password,\n            values.confirm\n        );\n        this.props.history.push('/');\n      }\n    });\n  };\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n          <div>\n              <Header{...this.props}/>\n              <div className='Login-page'>\n                  <h1>Register an Account With Us Today</h1>\n                  <Form onSubmit={this.handleSubmit}>\n\n                      <FormItem>\n                          {getFieldDecorator('userName', {\n                              rules: [{ required: true, message: 'Please input your username!' }],\n                          })(\n                              <Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Username\" />\n                          )}\n                      </FormItem>\n\n                      <FormItem>\n                          {getFieldDecorator('email', {\n                              rules: [{\n                                  type: 'email', message: 'The input is not valid E-mail!',\n                              }, {\n                                  required: true, message: 'Please input your E-mail!',\n                              }],\n                          })(\n                              <Input prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"Email\" />\n                          )}\n                      </FormItem>\n\n                      <FormItem>\n                          {getFieldDecorator('password', {\n                              rules: [{\n                                  required: true, message: 'Please input your password!',\n                              }, {\n                                  validator: this.validateToNextPassword,\n                              }],\n                          })(\n                              <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" />\n                          )}\n                      </FormItem>\n\n                      <FormItem>\n                          {getFieldDecorator('confirm', {\n                              rules: [{\n                                  required: true, message: 'Please confirm your password!',\n                              }, {\n                                  validator: this.compareToFirstPassword,\n                              }],\n                          })(\n                              <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"Password\" onBlur={this.handleConfirmBlur} />\n                          )}\n                      </FormItem>\n\n                      <FormItem>\n                          <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}}>\n                              Signup\n                          </Button>\n                          Or\n                          <NavLink\n                              style={{marginRight: '10px'}}\n                              to='/login/'> login\n                          </NavLink>\n                      </FormItem>\n\n                  </Form>\n              </div>\n              <Footer/>\n          </div>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create()(RegistrationForm);\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        error: state.error,\n        isAuthenticated: state.token !== null\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2)),\n        onTryAutoSignup: () => dispatch(actions.authCheckState())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);\n"]},"metadata":{},"sourceType":"module"}