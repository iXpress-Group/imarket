{"ast":null,"code":"// Load modules\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {\n  delimiter: '&',\n  arrayPrefixGenerators: {\n    brackets: function (prefix, key) {\n      return prefix + '[]';\n    },\n    indices: function (prefix, key) {\n      return prefix + '[' + key + ']';\n    },\n    repeat: function (prefix, key) {\n      return prefix;\n    }\n  }\n};\n\ninternals.stringify = function (obj, prefix, generateArrayPrefix) {\n  if (Utils.isBuffer(obj)) {\n    obj = obj.toString();\n  } else if (obj instanceof Date) {\n    obj = obj.toISOString();\n  } else if (obj === null) {\n    obj = '';\n  }\n\n  if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n    return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];\n  }\n\n  var values = [];\n\n  if (typeof obj === 'undefined') {\n    return values;\n  }\n\n  var objKeys = Object.keys(obj);\n\n  for (var i = 0, il = objKeys.length; i < il; ++i) {\n    var key = objKeys[i];\n\n    if (Array.isArray(obj)) {\n      values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));\n    } else {\n      values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));\n    }\n  }\n\n  return values;\n};\n\nmodule.exports = function (obj, options) {\n  options = options || {};\n  var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;\n  var keys = [];\n\n  if (typeof obj !== 'object' || obj === null) {\n    return '';\n  }\n\n  var arrayFormat;\n\n  if (options.arrayFormat in internals.arrayPrefixGenerators) {\n    arrayFormat = options.arrayFormat;\n  } else if ('indices' in options) {\n    arrayFormat = options.indices ? 'indices' : 'repeat';\n  } else {\n    arrayFormat = 'indices';\n  }\n\n  var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];\n  var objKeys = Object.keys(obj);\n\n  for (var i = 0, il = objKeys.length; i < il; ++i) {\n    var key = objKeys[i];\n    keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));\n  }\n\n  return keys.join(delimiter);\n};","map":null,"metadata":{},"sourceType":"script"}