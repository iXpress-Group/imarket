{"ast":null,"code":"var qs = require('qs');\n\nvar url = require('url');\n\nvar crypto = require('crypto');\n\nvar clone = require('clone');\n\nvar debug = require('debug')(\"qs:signature\");\n\nexports.stringify = function (opts, urlOrPath) {\n  if (!opts || !opts.signature || !urlOrPath) return qs.stringify(opts);\n  debug(\"signature base64 key\", opts.signature); //in order to avoid messing with the key stored by reference, extend:\n\n  var options = clone(opts);\n  debug(\"original url/path\", urlOrPath);\n  var usablePrivateKey = new Buffer(websafe(options.signature), 'base64');\n  delete options.signature;\n  var query = qs.stringify(options);\n  debug(\"query\", query);\n  var location = url.parse(urlOrPath);\n  var hmac = crypto.createHmac('sha1', usablePrivateKey);\n  location.search = query;\n  var urlToSign = location.pathname + \"?\" + location.search;\n  debug(\"url to sign\", urlToSign);\n  hmac.update(urlToSign);\n  debug(\"full url to sign\", location.format());\n  var hash = hmac.digest('base64');\n  options.signature = unWebsafe(hash);\n  debug(\"signature\", options.signature);\n  var result = qs.stringify(options).replace(/signature[=](.*?)([&]|$)/, function (all, theMatch, end) {\n    //console.log(arguments)\n    var finalQs = decodeURIComponent(\"signature=\" + theMatch + end);\n    debug(\"qs signature\", finalQs);\n    return finalQs;\n  });\n  debug(\"qs\", result);\n  return result;\n};\n\nfunction websafe(str) {\n  return str.replace(/[-]/g, \"+\").replace(/[_]/g, \"/\");\n}\n\nfunction unWebsafe(str) {\n  return str.replace(/[+]/g, \"-\").replace(/[/]/g, \"_\");\n}","map":null,"metadata":{},"sourceType":"script"}